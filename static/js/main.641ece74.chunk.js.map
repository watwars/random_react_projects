{"version":3,"sources":["typingApp/TypingApp.js","sortingVisualizer/sorting.js","sortingVisualizer/SortingVisualizer.js","App.js","index.js"],"names":["TypingApp","props","newRandomWord","temp","nextWord","state","words","Math","floor","random","length","setState","currentWord","decreaseTimer","timeLeft","time","gameFinished","clearInterval","timer","startTimer","isStarted","setInterval","makeGuess","guess","correct","incorrect","wrong","push","input","filter","w","handleInput","e","val","target","value","a","axios","get","response","this","data","pop","onClick","wpm","round","map","onSubmit","type","onChange","autoFocus","React","Component","arrIsSorted","arr","i","bubbleSort","array","steps","j","step","swap","selectionSort","min","tmp","insertionSort","generateArray","max","SortingVisualizer","useState","setArray","currentIndex","setCurrentIndex","setLength","speed","setSpeed","isSorting","setIsSorting","animationInterval","setAnimationInterval","useEffect","startSorting","func","alert","console","log","renderAnimations","interval","b","className","Slider","valueLabelDisplay","style","marginLeft","index","styling","height","backgroundColor","includes","Landing","to","App","history","useHistory","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.641ece74.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nclass TypingApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      words: [],\n      time: 60,\n      gameFinished: false,\n      input: \"\",\n      currentWord: \"\",\n      isStarted: false,\n    };\n    this.nextWord = \"\";\n    this.timer = 0;\n    this.correct = 0;\n    this.incorrect = 0;\n    this.wrong = [];\n  }\n\n  async componentDidMount() {\n    const URL = \"https://random-word-api.herokuapp.com/word?number=300\";\n    const response = await axios.get(URL);\n    this.nextWord = response.data[response.data.length - 1];\n    response.data.pop();\n    this.setState({ words: response.data });\n    this.newRandomWord();\n  }\n\n  newRandomWord = () => {\n    const temp = this.nextWord;\n    this.nextWord =\n      this.state.words[Math.floor(Math.random() * this.state.words.length)];\n    this.setState({\n      currentWord: temp,\n    });\n  };\n\n  decreaseTimer = () => {\n    const timeLeft = this.state.time;\n    if (timeLeft === 0) {\n      this.setState({ gameFinished: true });\n      clearInterval(this.timer);\n      return;\n    }\n    this.setState({ time: timeLeft - 1 });\n  };\n\n  startTimer = () => {\n    this.setState({ isStarted: true });\n    if (this.timer === 0 && this.state.time > 0) {\n      this.timer = setInterval(this.decreaseTimer, 1000);\n    }\n  };\n\n  makeGuess = (guess) => {\n    if (guess === this.state.currentWord + \" \") {\n      this.correct += guess.length - 1;\n    } else {\n      this.incorrect += guess.length - 1;\n      this.wrong.push([guess, this.state.currentWord]);\n    }\n    this.setState({\n      input: \"\",\n      words: this.state.words.filter((w) => w !== guess),\n    });\n    this.newRandomWord();\n  };\n\n  handleInput = (e) => {\n    const val = e.target.value;\n    if (val[val.length - 1] === \" \") {\n      this.makeGuess(val);\n    } else {\n      this.setState({ input: val });\n    }\n  };\n\n  render() {\n    if (!this.state.isStarted) {\n      return <button onClick={this.startTimer}>Start</button>;\n    }\n    if (this.state.gameFinished) {\n      const wpm = Math.round(this.correct / 5);\n      const wrong = this.wrong.map((w) => {\n        return (\n          <div>\n            {w[0]}: {w[1]}\n          </div>\n        );\n      });\n      return (\n        <div>\n          Your score: {wpm}\n          <div>{wrong}</div>\n        </div>\n      );\n    }\n    return (\n      <div>\n        <div>{this.state.currentWord}</div>\n        <div>Next: {this.nextWord}</div>\n        <div>{this.state.time}</div>\n        <form onSubmit={this.makeGuess}>\n          <input\n            type=\"text\"\n            value={this.state.input}\n            onChange={this.handleInput}\n            autoFocus\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default TypingApp;\n","export const arrIsSorted = (arr) => {\n    for (let i = 0; i < arr.length - 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n};\n\nexport const bubbleSort = (array) => {\n    let arr = [...array];\n    let steps = [];\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                steps.push({\n                    step: [j, j + 1],\n                    swap: true,\n                });\n                const temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            } else {\n                steps.push({\n                    step: [j, j + 1],\n                    swap: false,\n                });\n            }\n        }\n    }\n    return steps;\n};\n\nexport const selectionSort = (array) => {\n    let arr = [...array];\n    let steps = [];\n    for (let i = 0; i < arr.length; i++) {\n        // Finding the smallest number in the subarray\n        let min = i;\n        for (let j = i + 1; j < arr.length; j++) {\n            steps.push({\n                step: [j, min],\n                swap: false,\n            });\n            if (arr[j] < arr[min]) {\n                min = j;\n            }\n        }\n        if (min !== i) {\n            // Swapping the elements\n            steps.push({\n                step: [i, min],\n                swap: true,\n            });\n            let tmp = arr[i];\n            arr[i] = arr[min];\n            arr[min] = tmp;\n        }\n    }\n    return steps;\n};\n\nconst merge = (arr, left, mid, right, steps) => {\n    const n1 = mid - left + 1;\n    const n2 = right - mid;\n    const leftArray = new Array(n1);\n    const rightArray = new Array(n2);\n\n    for (let i = 0; i < n1; i++) leftArray[i] = arr[left + i];\n    for (let j = 0; j < n2; j++) rightArray[j] = arr[mid + 1 + j];\n\n    let i = 0;\n    let j = 0;\n    let k = left;\n\n    while (i < n1 && j < n2) {\n        if (leftArray[i] <= rightArray[j]) {\n            steps.push({\n                step: [k, left + i],\n                swap: true,\n            });\n            arr[k] = leftArray[i];\n            i++;\n        } else {\n            steps.push({\n                step: [k, j + mid + 1],\n                swap: true,\n            });\n            arr[k] = rightArray[j];\n            j++;\n        }\n        k++;\n    }\n    while (i < n1) {\n        steps.push({\n            step: [k, i + left],\n            swap: true,\n        });\n        arr[k] = leftArray[i];\n        i++;\n        k++;\n    }\n    while (j < n2) {\n        steps.push({\n            step: [k, j + mid + 1],\n            swap: true,\n        });\n        arr[k] = rightArray[j];\n        j++;\n        k++;\n    }\n};\n\nexport const mergeSort = (arr, left, right, steps = []) => {\n    if (left >= right) {\n        console.log(\"a\", arr);\n        return; //returns recursively\n    }\n    const mid = left + parseInt((right - left) / 2);\n    mergeSort(arr, left, mid, steps);\n    mergeSort(arr, mid + 1, right, steps);\n    merge(arr, left, mid, right, steps);\n    console.log(\"b\", arr);\n    if (arrIsSorted(arr)) {\n        console.log(\"ccc\");\n        return steps;\n    }\n};\n\nexport const quickSort = (arr, left, right, steps = []) => {};\n\nexport const insertionSort = (arr) => {};\n","import React, { useState, useEffect } from \"react\";\nimport { Slider } from \"@mui/material\";\n\nimport {\n  arrIsSorted,\n  bubbleSort,\n  selectionSort,\n  mergeSort,\n  quickSort,\n  insertionSort,\n} from \"./sorting\";\n\nimport \"./SortingVisualizer.css\";\n\nconst randomIntFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst generateArray = (length) => {\n  const arr = [];\n  for (let i = 0; i < length; i++) {\n    arr.push(randomIntFromInterval(5, 400));\n  }\n  return arr;\n};\n\nconst SortingVisualizer = () => {\n  const [array, setArray] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState([0, 0]);\n  const [length, setLength] = useState(50);\n  const [speed, setSpeed] = useState(100);\n  const [isSorting, setIsSorting] = useState(false);\n  const [animationInterval, setAnimationInterval] = useState(null);\n\n  const newArray = () => {\n    setIsSorting(false);\n    if (animationInterval) clearInterval(animationInterval);\n    setArray(generateArray(length));\n  };\n\n  useEffect(() => {\n    setArray(generateArray(length));\n  }, [length]);\n\n  const renderLengthSlider = () => {\n    return (\n      <div className=\"slider\">\n        <div className=\"lead\">Select array size:</div>\n        <Slider\n          value={length}\n          min={10}\n          max={100}\n          step={10}\n          valueLabelDisplay=\"auto\"\n          onChange={(e) => setLength(e.target.value)}\n        />\n      </div>\n    );\n  };\n\n  const renderSpeedSlider = () => {\n    return (\n      <div className=\"slider\">\n        <div className=\"lead\">Select sorting speed:</div>\n        <Slider\n          value={speed}\n          min={5}\n          max={200}\n          step={5}\n          valueLabelDisplay=\"auto\"\n          onChange={(e) => setSpeed(e.target.value)}\n        />\n      </div>\n    );\n  };\n\n  const startSorting = (func) => {\n    if (isSorting) return;\n    if (arrIsSorted(array)) {\n      alert(\"Array is already sorted!\");\n      return;\n    }\n    const steps = func([...array], 0, array.length - 1) || [];\n    console.log(steps);\n    setIsSorting(true);\n    renderAnimations(steps);\n  };\n\n  const renderSortButtons = () => {\n    return (\n      <div>\n        <button className=\"btn btn-success btn-lg\" onClick={() => newArray()}>\n          {!isSorting ? \"New Array\" : \"Stop Animation and Reset\"}\n        </button>\n        <br />\n        {!isSorting ? (\n          <div>\n            <div className=\"lead mt-3 mb-2\">Select sorting algorithm</div>\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => startSorting(bubbleSort)}\n            >\n              Bubble Sort\n            </button>\n            <button\n              className=\"btn btn-primary\"\n              style={{ marginLeft: \"20px\" }}\n              onClick={() => startSorting(selectionSort)}\n            >\n              Selection Sort\n            </button>\n            {/* <button\n                            className=\"btn btn-primary\"\n                            style={{ marginLeft: \"20px\" }}\n                            onClick={() => startSorting(mergeSort)}\n                        >\n                            Merge Sort\n                        </button> */}\n            <button\n              className=\"btn btn-primary\"\n              style={{ marginLeft: \"20px\" }}\n              onClick={() => startSorting(insertionSort)}\n            >\n              Insertion Sort\n            </button>\n            {/* <button\n              className=\"btn btn-primary\"\n              style={{ marginLeft: \"20px\" }}\n              onClick={() => startSorting(quickSort)}\n            >\n              Quick Sort\n            </button> */}\n          </div>\n        ) : (\n          <></>\n        )}\n      </div>\n    );\n  };\n\n  const renderAnimations = (steps) => {\n    let i = steps.length;\n    let j = 0;\n    console.log(speed);\n    const interval = setInterval(() => {\n      if (i > 0) {\n        const [a, b] = steps[j].step;\n        const swap = steps[j].swap;\n        if (swap) {\n          const temp = array[a];\n          array[a] = array[b];\n          array[b] = temp;\n        }\n        setArray([...array]);\n        setCurrentIndex([a, b]);\n        i--;\n        j++;\n      } else {\n        clearInterval(interval);\n        setAnimationInterval(null);\n        setIsSorting(false);\n      }\n    }, 205 - speed);\n    setAnimationInterval(interval);\n  };\n\n  const displayArray = () => {\n    return (\n      <div className=\"array-container\">\n        {array.map((value, index) => {\n          const styling = {\n            height: `${value}px`,\n            backgroundColor:\n              isSorting && currentIndex.includes(index) ? \"black\" : \"green\",\n          };\n          return <div className=\"array-bar\" key={index} style={styling}></div>;\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1 className=\"mt-5 mb-5\">Sorting Algorithms Visualizer</h1>\n      <div className=\"controls mb-5\">\n        {!isSorting ? (\n          <div className=\"leftControls\">\n            {renderLengthSlider()}\n            {renderSpeedSlider()}\n          </div>\n        ) : (\n          <div className=\"leftControls lead\">Animation In Progress</div>\n        )}\n        {/* control buttons  */}\n        {renderSortButtons()}\n      </div>\n      {displayArray()}\n    </div>\n  );\n};\n\nexport default SortingVisualizer;\n","import React from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport { useHistory } from \"react-router\";\n\nimport TypingApp from \"./typingApp/TypingApp\";\nimport SortingVisualizer from \"./sortingVisualizer/SortingVisualizer\";\n\nimport \"./App.css\";\n\nconst Landing = () => {\n  return (\n    <div className=\"container\">\n      <h1 className=\"mt-5 mb-3 \">My Projects</h1>\n      <ul className=\"list-group\">\n        {/* <li className=\"list-group-item\">\n          <Link to=\"/typing\">Typing App</Link>\n        </li> */}\n        <li className=\"list-group-item\">\n          <Link to=\"/sorting\">Sorting Visualizer</Link>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nconst App = () => {\n  const history = useHistory();\n  return (\n    <div>\n      <div className=\"homeBtn\" onClick={() => history.push(\"/\")}>\n        Home\n      </div>\n      <Switch>\n        <Route exact path=\"/\" component={Landing} />\n        <Route exact path=\"/typing\" component={TypingApp} />\n        <Route exact path=\"/sorting\" component={SortingVisualizer} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}